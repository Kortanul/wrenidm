/*
 * The contents of this file are subject to the terms of the Common Development and
 * Distribution License (the License). You may not use this file except in compliance with the
 * License.
 *
 * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
 * specific language governing permission and limitations under the License.
 *
 * When distributing Covered Software, include this CDDL Header Notice in each file and include
 * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
 * Header, with the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions copyright [year] [name of copyright owner]".
 *
 * Copyright 2016-2017 ForgeRock AS.
 */

package org.forgerock.openidm.sync.impl.cluster;

import org.forgerock.guava.common.base.Optional;
import org.forgerock.openidm.sync.SynchronizationException;
import org.forgerock.openidm.sync.impl.ReconciliationStatistic;

/**
 * Encapsulates the concerns of persisting the ReconciliationStatistics generated during clustered recon. Each source
 * page job running on a cluster node, and the target phase job, will generate a ReconciliationStatistics instance.
 * The state in each instance must be aggregated at the conclusion of the recon job.
 *
 * TODO: persistence format is TBD. Will likely be  json, and the ReconcilationStatistics class extended with a method
 * which can emit the json format. Likely an interface will be define to represent this concern, which the ReconciliationStatistic
 * class will implement, or possibly some other class, which may serve to record additional information about the recon task.
 * The implementation of this interface will likely also leverage an interface which encapsulates the concern of aggregating
 * a single ReconciliationStatistic from the persisted state produced by a set of ReconciliationStatistic instances.
 *
 */
public interface ReconciliationStatisticsPersistence {
    /**
     * Persists a ReconciliationStatistic instance.
     * @param reconId The id of the recon for which this instance should be persisted
     * @param instance the ReconciliationStatistic encapsulating the statistics for this clustered recon constituent
     * @throws SynchronizationException if the persistence could not complete successfully
     */
    void persistInstance(String reconId, ReconciliationStatistic instance) throws SynchronizationException;

    /**
     * Called at the conclusion of a recon to obtain the ReconciliationStatistic instance which aggregates all of the
     * statistics generated by each source phase page and by the target phase.
     * @param reconId the id of the recon
     * @return the {@code Optional<ReconciliationStatistic>} representing the aggregated state of all instances persisted as part of the
     * specified reconId. It could be optional in case a recon failure on another node already triggered the deletion of
     * persisted instances.
     * @throws SynchronizationException if the aggregated instance cannot be returned.
     */
    Optional<ReconciliationStatistic> getAggregatedInstance(String reconId) throws SynchronizationException;

    /**
     * Called at the conclusion of a recon, to delete persisted ReconciliationStatistics instances.
     * @param reconId the recon id for which persisted instances should be deleted.
     * @throws SynchronizationException if the persisted instances cannot be deleted.
     */
    void deletePersistedInstances(String reconId) throws SynchronizationException;
}
